// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Turbo_Az.DAL;

namespace Turbo_Az.Migrations
{
    [DbContext(typeof(Db_Turbo))]
    [Migration("20190810100241_SeedingDb")]
    partial class SeedingDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Turbo_Az.Models.AdPhotos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdvertisementId");

                    b.Property<string>("PhotoURL")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AdvertisementId");

                    b.ToTable("AdPhotos");

                    b.HasData(
                        new { Id = 1, AdvertisementId = 1, PhotoURL = "bmv.jpg" }
                    );
                });

            modelBuilder.Entity("Turbo_Az.Models.Advertisement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AdYear");

                    b.Property<string>("CarInfo")
                        .IsRequired();

                    b.Property<int>("CityId");

                    b.Property<int>("ColorId");

                    b.Property<int>("FuelId");

                    b.Property<int>("GradiuationYearId");

                    b.Property<int>("Hiking");

                    b.Property<bool>("IsVip");

                    b.Property<int>("MachinePowerId");

                    b.Property<int>("ModelId");

                    b.Property<string>("PhotoURL");

                    b.Property<decimal>("Price");

                    b.Property<int>("SpeedId");

                    b.Property<DateTime>("UpdateYear");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ColorId");

                    b.HasIndex("FuelId");

                    b.HasIndex("GradiuationYearId");

                    b.HasIndex("MachinePowerId");

                    b.HasIndex("ModelId");

                    b.HasIndex("SpeedId");

                    b.ToTable("Advertisements");

                    b.HasData(
                        new { Id = 1, AdYear = new DateTime(2019, 8, 10, 3, 2, 40, 363, DateTimeKind.Local), CarInfo = "Biraz orasin-burasin vurmusam", CityId = 1, ColorId = 1, FuelId = 1, GradiuationYearId = 1, Hiking = 12000, IsVip = false, MachinePowerId = 4, ModelId = 1, PhotoURL = "bmv.jpg", Price = 25000m, SpeedId = 2, UpdateYear = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 2, AdYear = new DateTime(2019, 8, 10, 3, 2, 40, 367, DateTimeKind.Local), CarInfo = "Biraz orasin-burasin vurmusam", CityId = 2, ColorId = 3, FuelId = 1, GradiuationYearId = 1, Hiking = 8000, IsVip = false, MachinePowerId = 4, ModelId = 3, PhotoURL = "car2.jpg", Price = 50000m, SpeedId = 1, UpdateYear = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 3, AdYear = new DateTime(2019, 8, 10, 3, 2, 40, 367, DateTimeKind.Local), CarInfo = "Biraz orasin-burasin vurmusam", CityId = 3, ColorId = 2, FuelId = 2, GradiuationYearId = 2, Hiking = 76000, IsVip = false, MachinePowerId = 4, ModelId = 2, PhotoURL = "car1.jpg", Price = 17000m, SpeedId = 2, UpdateYear = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("Turbo_Az.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Turbo_Az.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new { Id = 1, Name = "Mercedes" },
                        new { Id = 2, Name = "BMW" },
                        new { Id = 3, Name = "Honda" },
                        new { Id = 4, Name = "Ford" }
                    );
                });

            modelBuilder.Entity("Turbo_Az.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new { Id = 1, Name = "Bakı" },
                        new { Id = 2, Name = "Gence" },
                        new { Id = 3, Name = "Sumqayit" },
                        new { Id = 4, Name = "Lenkeran" }
                    );
                });

            modelBuilder.Entity("Turbo_Az.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CarColor")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new { Id = 1, CarColor = "Qara" },
                        new { Id = 2, CarColor = "Sari" },
                        new { Id = 3, CarColor = "Qirmizi" },
                        new { Id = 4, CarColor = "Mavi" }
                    );
                });

            modelBuilder.Entity("Turbo_Az.Models.Fuel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CarFuel")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Fuels");

                    b.HasData(
                        new { Id = 1, CarFuel = "Benzin" },
                        new { Id = 2, CarFuel = "Qaz" },
                        new { Id = 3, CarFuel = "Elektro" },
                        new { Id = 4, CarFuel = "Hibrid" },
                        new { Id = 5, CarFuel = "Dizel" }
                    );
                });

            modelBuilder.Entity("Turbo_Az.Models.GradiuationYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.ToTable("GradiuationYears");

                    b.HasData(
                        new { Id = 1, Year = 1910 },
                        new { Id = 2, Year = 1911 },
                        new { Id = 3, Year = 1912 },
                        new { Id = 4, Year = 1913 }
                    );
                });

            modelBuilder.Entity("Turbo_Az.Models.MachinePower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Power");

                    b.HasKey("Id");

                    b.ToTable("MachinePowers");

                    b.HasData(
                        new { Id = 1, Power = 200 },
                        new { Id = 2, Power = 300 },
                        new { Id = 3, Power = 400 },
                        new { Id = 4, Power = 500 }
                    );
                });

            modelBuilder.Entity("Turbo_Az.Models.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Models");

                    b.HasData(
                        new { Id = 1, BrandId = 2, Name = "X5" },
                        new { Id = 2, BrandId = 2, Name = "X3" },
                        new { Id = 3, BrandId = 1, Name = "C200" },
                        new { Id = 4, BrandId = 1, Name = "C230" }
                    );
                });

            modelBuilder.Entity("Turbo_Az.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MainInfo")
                        .IsRequired();

                    b.Property<string>("PhotoURL")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ShortInfo")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("Time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("News");

                    b.HasData(
                        new { Id = 1, MainInfo = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum", PhotoURL = "car1.jpg", ShortInfo = "Yeni sport masin cemiyyete teqdim edildi.", Time = new DateTime(2019, 8, 10, 3, 2, 40, 368, DateTimeKind.Local), Title = "Yeni Sport Car" },
                        new { Id = 2, MainInfo = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum", PhotoURL = "car2.jpg", ShortInfo = "Aston Martin sirketinin yeni istehsali.", Time = new DateTime(2019, 8, 10, 3, 2, 40, 369, DateTimeKind.Local), Title = "Aston Martin" },
                        new { Id = 3, MainInfo = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum", PhotoURL = "car3.jpg", ShortInfo = "AHJDKFF", Time = new DateTime(2019, 8, 10, 3, 2, 40, 369, DateTimeKind.Local), Title = "Mini" }
                    );
                });

            modelBuilder.Entity("Turbo_Az.Models.Speed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CarSpeed")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Speeds");

                    b.HasData(
                        new { Id = 1, CarSpeed = "Mexaniki" },
                        new { Id = 2, CarSpeed = "Avtomat" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Turbo_Az.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Turbo_Az.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Turbo_Az.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Turbo_Az.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Turbo_Az.Models.AdPhotos", b =>
                {
                    b.HasOne("Turbo_Az.Models.Advertisement", "Advertisement")
                        .WithMany("Photos")
                        .HasForeignKey("AdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Turbo_Az.Models.Advertisement", b =>
                {
                    b.HasOne("Turbo_Az.Models.City", "City")
                        .WithMany("Advertisement")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Turbo_Az.Models.Color", "Color")
                        .WithMany("Advertisement")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Turbo_Az.Models.Fuel", "Fuel")
                        .WithMany("Advertisement")
                        .HasForeignKey("FuelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Turbo_Az.Models.GradiuationYear", "GradiuationYear")
                        .WithMany("Advertisement")
                        .HasForeignKey("GradiuationYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Turbo_Az.Models.MachinePower", "MachinePower")
                        .WithMany("Advertisement")
                        .HasForeignKey("MachinePowerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Turbo_Az.Models.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Turbo_Az.Models.Speed", "Speed")
                        .WithMany("Advertisement")
                        .HasForeignKey("SpeedId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Turbo_Az.Models.Model", b =>
                {
                    b.HasOne("Turbo_Az.Models.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
